/******************************************************************************
 *
 * (c) Copyright 2010-2013 Xilinx, Inc. All rights reserved.
 *
 * This file contains confidential and proprietary information of Xilinx, Inc.
 * and is protected under U.S. and international copyright and other
 * intellectual property laws.
 *
 * DISCLAIMER
 * This disclaimer is not a license and does not grant any rights to the
 * materials distributed herewith. Except as otherwise provided in a valid
 * license issued to you by Xilinx, and to the maximum extent permitted by
 * applicable law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL
 * FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
 * MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE;
 * and (2) Xilinx shall not be liable (whether in contract or tort, including
 * negligence, or under any other theory of liability) for any loss or damage
 * of any kind or nature related to, arising under or in connection with these
 * materials, including for any direct, or any indirect, special, incidental,
 * or consequential loss or damage (including loss of data, profits, goodwill,
 * or any type of loss or damage suffered as a result of any action brought by
 * a third party) even if such damage or loss was reasonably foreseeable or
 * Xilinx had been advised of the possibility of the same.
 *
 * CRITICAL APPLICATIONS
 * Xilinx products are not designed or intended to be fail-safe, or for use in
 * any application requiring fail-safe performance, such as life-support or
 * safety devices or systems, Class III medical devices, nuclear facilities,
 * applications related to the deployment of airbags, or any other applications
 * that could lead to death, personal injury, or severe property or
 * environmental damage (individually and collectively, "Critical
 * Applications"). Customer assumes the sole risk and liability of any use of
 * Xilinx products in Critical Applications, subject only to applicable laws
 * and regulations governing limitations on product liability.
 *
 * THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE
 * AT ALL TIMES.
 *
 ******************************************************************************/
/*****************************************************************************/
/**
 *
 * @file xaxidma_example_simple_poll.c
 *
 * This file demonstrates how to use the xaxidma driver on the Xilinx AXI
 * DMA core (AXIDMA) to transfer packets in polling mode when the AXI DMA core
 * is configured in simple mode.
 *
 * This code assumes a loopback hardware widget is connected to the AXI DMA
 * core for data packet loopback.
 *
 * To see the debug print, you need a Uart16550 or uartlite in your system,
 * and please set "-DDEBUG" in your compiler options. You need to rebuild your
 * software executable.
 *
 * Make sure that MEMORY_BASE is defined properly as per the HW system. The
 * h/w system built in Area mode has a maximum DDR memory limit of 64MB. In
 * throughput mode, it is 512MB.  These limits are need to ensured for
 * proper operation of this code.
 *
 *
 * <pre>
 * MODIFICATION HISTORY:
 *
 * Ver   Who  Date     Changes
 * ----- ---- -------- -------------------------------------------------------
 * 4.00a rkv  02/22/11 New example created for simple DMA, this example is for
 *                  simple DMA
 * 5.00a srt  03/06/12 Added Flushing and Invalidation of Caches to fix CRs
 *               648103, 648701.
 *               Added V7 DDR Base Address to fix CR 649405.
 * 6.00a srt  03/27/12 Changed API calls to support MCDMA driver.
 * 7.00a srt  06/18/12 API calls are reverted back for backward compatibility.
 * 7.01a srt  11/02/12 Buffer sizes (Tx and Rx) are modified to meet maximum
 *               DDR memory limit of the h/w system built with Area mode
 * 7.02a srt  03/01/13 Updated DDR base address for IPI designs (CR 703656).
 *
 * </pre>
 *
 * ***************************************************************************

 */
/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"
#include <stdio.h>
#include <inttypes.h>
#include <time.h>
#include <math.h>
#include "xtime_l.h"

/******************** Constant Definitions **********************************/

/*
 * Device hardware build related constants.
 */

#define DMA_DEV_ID        XPAR_AXIDMA_0_DEVICE_ID
#define DDR_BASE_ADDR        XPAR_DDR_MEM_BASEADDR

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
  DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR        0x01000000
#else
#define MEM_BASE_ADDR        (DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BUFFER_BASE        (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE        (MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH        (MEM_BASE_ADDR + 0x004FFFFF)

#define NUMBER_OF_WORDS     32
#define NUMBER_OF_BYTES         NUMBER_OF_WORDS * 4

#define TEST_START_VALUE    10

#define NUMBER_OF_TRANSFERS    NUMBER_OF_WORDS / 4

#define num_of_features 13
#define length_of_train_data 168
#define length_of_test_data 10


#define InputN 13		// number of neurons in the input layer
#define HN 4			// number of neurons in the hidden layer
#define OutN 3			// number of neurons in the output layer
#define datanum 153		// number of training samples
#define alpha 0.01
#define learning_rate_reverse 178
#define regularization_rate_reverse 178

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

int XAxiDma_SimplePollExample(u16 DeviceId);
u32 Conversion(float input);
double Conversion_back(u32 input);
void normalization(int row, int col, double array[row][col]);
void print_float(float Input);
int power(int base, int exp);
double sigmoid(double);
XAxiDma AxiDma;
/*****************************************************************************/

int main()
{
  XTime tStart, tEnd;
  XTime_GetTime(&tStart);
  int Status;
  int loop;
  Status = XAxiDma_SimplePollExample(DMA_DEV_ID);

  if (Status != XST_SUCCESS) {

    xil_printf("XAxiDma_SimplePollExample: Failed\r\n");
    return XST_FAILURE;
  }
  xil_printf("--- Initialization Finished --- \r\n");
  int new_sequence[datanum] = {0,50,110,1,51,111,2,112,52,3,113,53,4,114,54,5,115,55,6,116,56,7,117,57,8,118,58,9,119,59,10,120,60,11,121,
  	61,122,12,62,123,13,63,124,14,64,125,15,65,126,16,66,127,17,67,18,128,68,19,129,69,20,130,70,21,131,71,22,132,72,133,
  	23,73,134,24,74,135,25,75,136,26,76,137,27,77,28,138,78,29,79,30,139,80,31,140,81,32,82,141,33,83,34,84,142,35,85,36,143,86,37,87,38,144,
  	88,39,145,89,40,90,146,41,91,42,147,92,43,148,93,44,94,149,45,95,150,46,96,151,47,97,
  	48,98,49,99,100,101,102,103,104,105,106,107,108,152,109};

  int y[datanum][OutN]={
  {1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},
  {1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},
  {1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},
  {1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},
  {1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},

  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},{0,1,0},
  {0,1,0},
  {0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},
  {0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},
  {0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},
  {0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},{0,0,1},
  {0,0,1},{0,0,1},{0,0,1}};


  double input[datanum][InputN] = {
  {215,118,112,99,152,195,211,55,216,147,210,178,255},
  {216,79,117,76,107,118,154,76,126,126,188,147,236},
  {187,93,138,61,80,159,175,91,152,143,182,154,244},
  {255,93,133,0,89,210,234,163,255,137,210,139,210},
  {237,101,131,0,138,231,231,91,255,195,196,163,255},
  {178,98,206,84,183,185,184,96,113,190,218,152,242},
  {230,104,210,138,219,180,199,112,170,160,160,131,236},
  {193,84,187,138,196,195,216,148,142,171,176,124,206},
  {222,85,154,71,165,231,250,106,158,229,204,147,255},
  {178,172,173,46,201,169,192,29,136,129,129,195,148},
  {212,88,108,61,246,200,201,65,185,144,165,227,135},
  {122,212,194,111,138,140,152,70,172,113,148,210,133},
  {184,101,126,73,134,160,183,81,139,93,171,253,187},
  {116,86,164,96,107,147,150,76,113,97,165,220,182},
  {167,98,185,138,111,152,165,86,136,86,174,237,148},
  {132,112,255,233,237,162,170,184,165,87,176,181,145},
  {159,96,187,63,98,185,186,117,112,121,118,183,219},
  {152,93,75,80,102,139,138,81,101,97,146,142,237},
  {197,103,229,126,161,195,188,132,147,113,210,199,162},
  {208,90,91,61,111,164,147,76,172,118,151,216,187},
  {186,80,206,186,134,200,206,91,216,146,193,137,237},
  {174,89,126,120,156,186,202,55,168,179,165,152,255},
  {182,99,126,84,147,141,170,158,170,94,204,151,177},
  {188,82,206,128,255,195,174,199,101,137,210,163,227},
  {168,97,194,119,174,134,160,91,122,104,168,151,199},
  {166,98,138,147,129,169,189,76,158,129,151,205,163},
  {150,88,238,51,174,159,170,117,102,115,165,143,155},
  {132,89,171,99,120,144,154,91,111,106,174,119,201},
  {133,80,66,51,120,139,167,86,103,91,190,135,184},
  {224,223,161,7,255,200,193,45,183,129,109,211,131},
  {172,92,115,65,205,215,209,117,212,158,126,197,138},
  {160,214,70,115,84,144,170,81,116,107,115,163,187},
  {197,102,180,42,134,226,226,29,140,138,106,213,199},
  {147,222,110,90,143,163,166,106,136,109,90,163,114},
  {132,96,66,80,161,200,190,86,177,128,106,195,156},
  {223,226,145,117,178,185,168,96,90,133,104,193,196},
  {237,200,108,61,138,226,201,81,195,124,151,203,193},
  {199,90,70,61,134,210,215,50,189,157,115,193,176},
  {215,110,136,115,143,175,185,106,216,160,160,140,192},
  {202,93,105,88,165,188,225,106,183,234,174,172,232},
  {132,93,52,0,93,171,207,29,255,187,174,155,210},
  {193,89,182,84,102,144,190,55,206,143,207,196,233},
  {193,94,140,23,178,255,238,106,159,183,143,186,218},
  {189,103,201,82,196,200,177,142,138,162,176,157,255},
  {186,90,101,69,210,159,184,50,131,150,118,181,192},
  {172,93,150,147,201,196,176,45,224,161,134,166,204},
  {224,92,112,67,210,221,190,76,177,164,123,191,173},
  {151,107,201,76,138,200,205,101,136,154,160,149,234},
  {185,76,159,74,165,241,233,40,178,176,109,151,237},

  {66,62,0,76,255,82,80,14,230,67,218,169,122},
  {72,86,91,145,143,6,63,132,113,73,114,57,153},
  {196,81,199,233,66,195,181,50,159,82,241,177,60},
  {167,89,98,214,71,86,116,81,65,92,134,143,72},
  {127,90,182,255,255,231,183,50,169,81,227,208,176},
  {46,57,112,157,134,239,135,9,135,77,137,175,156},
  {22,102,24,61,116,58,99,117,79,93,204,85,63},
  {130,46,0,61,66,93,128,65,113,115,193,116,56},
  {37,160,96,99,183,69,83,163,56,62,129,120,78},
  {75,51,31,38,255,88,117,122,255,82,157,101,129},
  {104,216,136,195,134,183,161,163,168,59,193,175,70},
  {49,47,42,119,66,141,143,96,110,57,246,174,33},
  {106,98,89,115,66,118,160,76,148,96,185,176,121},
  {55,59,161,214,31,98,99,148,107,49,227,138,104},
  {132,215,117,186,62,62,100,255,131,121,95,74,81},
  {37,45,178,99,102,118,140,55,213,73,81,170,82},
  {102,50,98,99,125,118,122,96,113,61,204,177,68},
  {62,86,115,191,84,75,106,163,125,56,232,96,77},
  {22,90,187,253,75,90,101,148,100,60,241,182,90},
  {21,112,150,168,57,93,106,189,101,66,140,140,114},
  {55,70,112,207,0,118,100,158,104,36,160,182,103},
  {55,99,117,109,44,57,94,209,133,55,162,97,74},
  {49,81,140,176,66,42,78,199,132,88,154,131,68},
  {104,82,103,151,40,34,92,240,131,73,129,78,77},
  {72,156,94,99,75,144,142,70,173,48,182,190,35},
  {19,108,108,99,120,202,143,29,101,78,185,159,46},
  {86,81,89,119,255,149,143,106,255,60,185,130,167},
  {34,116,215,166,255,57,61,14,125,57,126,96,103},
  {72,75,38,61,62,154,158,91,148,68,204,140,63},
  {78,55,66,109,75,253,238,65,168,113,151,142,110},
  {72,176,91,99,75,185,190,173,255,52,255,148,59},
  {55,113,0,90,116,121,137,76,107,79,216,159,121},
  {96,71,19,109,75,42,85,91,101,56,151,142,90},
  {76,135,150,157,120,155,133,117,97,66,84,197,65},
  {35,93,15,128,66,149,103,132,109,45,123,113,61},
  {89,93,38,147,62,118,121,106,116,70,151,214,113},
  {82,140,105,176,84,65,116,255,109,63,101,190,40},
  {69,93,70,119,40,62,128,132,132,82,140,178,80},
  {106,94,108,186,57,34,111,189,132,79,106,111,75},
  {66,68,29,119,93,135,129,142,183,63,101,165,40},
  {18,71,206,138,102,173,185,91,229,62,129,186,114},
  {7,208,1,128,161,218,163,65,255,68,70,146,90},
  {90,133,82,157,75,154,143,76,87,44,112,143,42},
  {30,148,255,138,143,72,128,250,68,93,204,118,100},
  {3,37,159,157,75,147,127,158,111,73,168,101,64},
  {55,74,159,186,57,155,145,163,66,68,120,180,54},
  {0,81,89,166,62,145,137,209,175,41,255,151,59},
  {35,78,40,153,66,96,100,96,121,42,126,193,77},
  {82,86,87,186,165,98,132,117,130,45,157,159,46},
  {110,191,38,61,40,60,78,163,43,82,56,84,52},
  {49,191,42,119,71,98,103,132,159,24,120,168,91},
  {6,132,140,138,111,190,177,106,155,78,84,198,103},
  {14,112,255,255,214,218,255,184,159,154,120,225,71},
  {82,248,213,255,138,118,134,163,141,46,118,174,50},
  {132,255,73,166,66,161,168,96,175,60,64,172,53},
  {39,241,133,157,48,186,192,50,255,66,70,221,53},
  {55,118,82,157,62,159,168,132,101,65,101,188,53},
  {83,82,110,166,66,173,200,142,148,97,53,149,48},
  {33,116,224,255,93,111,142,240,147,71,132,113,71},
  {78,88,112,224,75,120,155,148,163,47,109,143,46},
  {52,240,131,176,40,108,110,158,101,60,81,124,94},
  {117,71,117,99,228,48,78,50,55,102,73,9,104},
  {118,165,136,138,147,26,76,65,43,137,67,21,84},
  {113,126,136,214,120,11,68,81,43,146,45,15,90},
  {104,198,126,166,156,67,75,29,44,126,78,9,98},
  {89,65,101,90,62,98,35,250,90,139,70,29,108},
  {96,135,89,109,102,59,40,255,55,184,64,35,117},
  {69,255,168,157,80,34,28,214,40,95,70,7,123},
  {91,255,192,233,111,76,36,255,73,126,90,45,81},
  {167,200,87,128,75,59,29,240,49,146,87,57,94},
  {115,164,185,214,134,131,36,214,41,124,109,86,96},
  {122,155,206,157,111,51,30,214,34,115,76,101,98},
  {156,141,124,138,80,36,30,132,22,143,56,115,135},
  {169,176,210,205,116,52,31,199,12,108,109,78,82},
  {177,255,124,138,93,98,49,184,64,110,115,77,88},
  {69,216,89,109,183,34,48,91,78,215,42,73,150},
  {141,199,77,157,138,47,33,163,95,99,28,44,145},
  {197,255,96,138,40,0,20,148,26,124,22,12,61},
  {118,255,154,166,66,67,40,184,46,200,11,60,103},
  {153,180,131,166,93,91,47,173,90,221,14,39,108},
  {134,218,126,166,187,37,87,117,78,248,20,12,88},
  {167,173,187,214,232,36,99,55,90,226,25,10,78},
  {111,147,154,176,183,45,85,65,91,255,0,25,74},
  {137,103,217,243,201,118,80,76,125,184,31,12,63},
  {146,183,108,109,120,77,51,255,159,255,17,29,113},
  {95,68,66,138,143,45,35,214,107,198,22,32,106},
  {141,255,117,176,98,71,38,255,123,206,28,26,124},
  {194,230,131,128,80,77,51,189,125,237,20,40,74},
  {85,168,192,255,116,88,35,255,78,195,48,49,155},
  {234,90,206,233,120,180,82,214,252,255,20,69,110},
  {166,90,192,186,80,159,68,209,206,255,20,53,102},
  {77,214,131,157,75,128,57,199,66,200,17,35,82},
  {182,181,168,138,161,80,34,199,40,151,129,57,114},
  {116,181,178,176,156,62,36,250,57,142,104,83,92},
  {125,192,124,109,156,35,43,148,55,134,50,50,113},
  {189,152,112,176,84,31,42,153,65,253,56,44,101},
  {186,244,103,186,75,24,28,209,79,171,78,50,82},
  {163,206,182,195,178,67,57,163,113,255,98,33,117},
  {114,187,112,128,75,45,40,148,59,255,62,50,115},
  {174,142,203,224,152,52,52,142,122,227,67,55,129},
  {159,255,243,233,183,96,59,81,74,223,48,66,104},
  {65,168,117,119,111,21,29,148,32,140,45,58,80},
  {110,131,108,128,66,35,31,189,22,255,20,40,72},
  {219,138,154,138,89,65,43,168,89,255,34,47,110}};
  double w[InputN][HN] ={{0.0}};		// weights from input layer to hidden layer
  double v[HN][OutN] ={{0.0}};	// weights from hidden layer to output layer

  double hn_out[HN]={0.0};
  double y_out[datanum][OutN]={{0.0}};

  double error;

  double y_delta[OutN]={0};
  double hn_delta[HN]={0};

  for(int i=0; i<InputN; i++){
  	for(int j=0; j<HN; j++){
  		if(i==j)
  		w[i][j] = 0.001;
  		else
  		w[i][j] = 0;
  		}
  }
  for(int i=0; i<HN; i++){
  	for(int j=0; j<OutN; j++){
  		if(i==j)
  		v[i][j] = 0.001;
  		else
  		v[i][j] = 0;
  	}
  }

  double sumtemp = 0.0;
  double temp=0.0;
  double sumerror = 0.0;
  while(loop <1000){
  	loop++;
  	sumerror = 0;
  	for(int i=0;i<datanum;i++)
  	{
  		for(int k=0;k<HN;k++)
  		{
  			sumtemp=0;
  			for(int j=0;j<InputN;j++)
  				sumtemp += input[new_sequence[i]][j] * w[j][k];
  			hn_out[k] = sigmoid(sumtemp);
  		}

  		for(int k=0;k<OutN;k++)
  		{
  			sumtemp=0;
  			for(int j=0;j<HN;j++)
  				sumtemp += hn_out[j] * v[j][k];
  			y_out[i][k] = sigmoid(sumtemp);
  		}

  		for(int j=0;j<OutN;j++)
  		{
  			error = y[new_sequence[i]][j] - y_out[i][j];
  			y_delta[j] = error * y_out[new_sequence[i]][j] * (1 - y_out[new_sequence[i]][j])/learning_rate_reverse;
  			sumerror += 0.5 * error * error;
//  			sumerror = sumerror/3;
  		}

  		for(int j=0;j<HN;j++)
  		{
  			error = 0.0;
  			for(int k=0;k<OutN;k++)
  				error += y_delta[k] * v[j][k];
  			hn_delta[j] = error * hn_out[j] * (1 - hn_out[j])/regularization_rate_reverse;

  		}

  		for(int k=0; k<HN; k++){
  			for(int j=0; j<OutN; j++){
  				temp = y_delta[j] * hn_out[k];
  				v[k][j] = v[k][j] + temp;
  				}
  			}

  		for(int k=0; k<InputN; k++){
  			for(int j=0; j<HN; j++){
  				temp = hn_delta[j] * input[new_sequence[i]][k];
  				w[k][j] = w[k][j] + temp;
  				}
  			}
  	}
  	xil_printf("Training Finished ");
  	xil_printf("Epoch %d ", loop);
  	xil_printf("   the error is ");
  	print_float(sumerror/3);
  	xil_printf("\r\n");
  }

  int testdata[25][13]= {{225,92,143,53,250,180,194,86,206,144,151,246,193},
  {144,96,75,0,129,164,175,76,93,109,154,199,190},
  {141,129,199,111,134,180,206,96,255,145,148,178,217},
  {236,106,159,76,187,255,222,65,194,204,101,204,255},
  {147,143,245,157,210,180,170,142,154,108,151,157,126},
  {223,95,147,46,183,228,215,117,170,175,154,149,255},
  {238,101,147,34,111,149,159,96,172,133,146,215,238},
  {212,117,185,92,223,159,159,101,90,128,157,215,239},
  {255,88,82,23,116,180,189,91,172,132,162,149,189},
  {196,71,105,61,120,198,200,55,157,188,143,213,189},

  {78,48,0,0,75,96,35,86,0,42,154,57,82},
  {75,57,108,61,134,103,68,255,0,79,210,43,114},
  {100,72,47,76,129,100,88,214,19,147,134,36,68},
  {181,66,24,99,102,108,113,106,32,93,204,114,104},
  {78,59,80,119,71,251,197,40,159,111,202,151,62},
  {63,77,166,119,147,87,110,173,65,70,255,94,48},
  {78,63,173,101,120,141,168,132,183,115,193,100,114},
  {137,52,0,42,31,198,202,76,205,135,174,179,78},
  {78,61,24,130,31,109,126,81,66,118,174,206,80},
  {155,48,126,80,174,152,81,225,0,76,146,67,129},

  {184,255,147,147,107,65,37,209,69,201,39,49,127},
  {159,218,154,195,138,77,46,163,108,190,56,33,129},
  {149,239,103,138,219,56,42,163,101,255,25,33,146},
  {141,143,129,138,219,62,42,214,113,245,28,39,147},
  {217,229,215,224,111,103,47,230,101,242,31,37,90}};

  int result[25]= {1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3};
  float predict_result[25][OutN];
  float test_hn[25][HN];

  	for(int i=0;i<25;i++)
  	{
  		for(int k=0;k<HN;k++)
  		{
  			sumtemp=0;
  			for(int j=0;j<InputN;j++)
  				sumtemp += testdata[i][j] * w[j][k];
  			test_hn[i][k] = sigmoid(sumtemp);
  		}
  	}
  	for(int i=0;i<25;i++)
  	{
  	     for(int k=0;k<OutN;k++)
  	    {
  			sumtemp=0;
  			for(int j=0;j<HN;j++)
  				sumtemp += test_hn[i][j] * v[j][k];
  			predict_result[i][k] = sigmoid(sumtemp);
  	    }
  	}

  	for(int i=0;i<25;i++)
  	{
		xil_printf("Output Neuron 1 2 3: ");
  		for(int j=0;j<3;j++)
  		{
  			print_float(predict_result[i][j]);
  		}
  		xil_printf("\r\n");
  	}
  int output_result[25];
  double output1,output2,output3;

  	xil_printf("The Predicted Result is ");
  	for(int i=0;i<25;i++)
  	{
  		for(int j=0;j<3;j++)
  		{
  //			printf(" %lf ",predict_result[i][j]);
  			if(j==0)
  				output1 = predict_result[i][j];
  			if(j==1)
  				output2 = predict_result[i][j];
  			else
  				output3 = predict_result[i][j];
  		}
  		if(output1>output2)
  		{
  			if(output1>output3)
  				output_result[i] = 1;
  			else
  				output_result[i] = 3;
  		}
  		else
  		{
  		   if(output2<output3)
  		   		output_result[i] = 3;
  		   else
  		   		output_result[i] = 2;
  		}
  		xil_printf(" %d ",output_result[i]);
  	}
  	xil_printf("\r\n");

  	xil_printf("The Real Result is ");
  	double count = 0;
  	for(int i=0;i<25;i++)
  	{
  		xil_printf(" %d ",result[i]);
  		if(result[i]==output_result[i])
  			count++;
  	}
  	xil_printf("\r\n");
  	xil_printf("The predict accuracy is ");
  	print_float(count/25);
  	xil_printf("\r\n");
  XTime_GetTime(&tEnd);
  float x = 1.0 * (tEnd-tStart)/100000000;
  xil_printf("The running speed(s) is ");
  print_float(x);

  return XST_SUCCESS;
}


/*****************************************************************************/
/**
 * The example to do the simple transfer through polling. The constant
 * NUMBER_OF_TRANSFERS defines how many times a simple transfer is repeated.
 *
 * @param    DeviceId is the Device Id of the XAxiDma instance
 *
 * @return
 *        - XST_SUCCESS if example finishes successfully
 *        - XST_FAILURE if error occurs
 *
 * @note        None
 *
 *
 ******************************************************************************/
int XAxiDma_SimplePollExample(u16 DeviceId)
{
  XAxiDma_Config *CfgPtr;
  int Status;
  u32 Index;
  u32 *TxBufferPtr;
  u32 *RxBufferPtr;
  u32 Value;


  TxBufferPtr = (u32 *)TX_BUFFER_BASE ;
  RxBufferPtr = (u32 *)RX_BUFFER_BASE;

  /* Initialize the XAxiDma device.
   */
  CfgPtr = XAxiDma_LookupConfig(DeviceId);
  if (!CfgPtr) {
    xil_printf("No config found for %d\r\n", DeviceId);
    return XST_FAILURE;
  }
  //xil_printf("Found config for AXI DMA\n\r");

  Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
  if (Status != XST_SUCCESS) {
    xil_printf("Initialization failed %d\r\n", Status);
    return XST_FAILURE;
  }
  //xil_printf("Finish initializing configurations for AXI DMA\n\r");

  if(XAxiDma_HasSg(&AxiDma)){
    xil_printf("Device configured as SG mode \r\n");
    return XST_FAILURE;
  }
  //xil_printf("AXI DMA is configured as Simple Transfer mode\n\r");

  /* Disable interrupts, we use polling mode
   */
  XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
      XAXIDMA_DEVICE_TO_DMA);
  XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
      XAXIDMA_DMA_TO_DEVICE);
  return XST_SUCCESS;
}


u32 Conversion(float input)
{
	u32 output=0;
	int temp_array[10]={0};
	float temp = input;
	float float_part = 0;
	int integer_part = 0;
	int count = 0;
	while(temp>=1)
	{
		temp--;
	}

	float_part = temp;
	integer_part = input - float_part;

	while(integer_part != 0)
	{
		temp_array[count] = integer_part % 2;
		integer_part = integer_part / 2;
		count ++;
	}

	for(int i=9;i>=0;i--)
	{
		if(temp_array[i]==1)
			output = output + 1;
		output = output << 1;
	}

/*  conversion of the floating part */
	if(float_part >= 0.5)
	{
		output = output + 1;
		float_part = float_part - 0.5;
	}
	output = output << 1;
	if(float_part >= 0.25)
	{
		output = output + 1;
		float_part = float_part -0.25;
	}
	output = output << 1;
	if(float_part >= 0.125)
	{
		output = output + 1;
		float_part = float_part - 0.125;
	}
	output = output << 1;
	if(float_part >= 0.0625)
	{
		output = output + 1;
		float_part = float_part - 0.0625;
	}
	output = output << 1;
	if(float_part >=0.03125)
	{
		output = output + 1;
		float_part = float_part - 0.03125;
	}
/* end of conversion */
	return output;
}

double Conversion_back(u32 input)
{
	int temp[32]={0};
	float sum = 0;
	float value = 0;
	for(int i=0;i<32;i++)
	{
		temp[i]=input%2;
		input = input/2;
	}
	for(int i=4;i>=0;i--)
	{
		if(temp[i]==1)
		{
			value = 1.0/(power(2,(5-i)));
			sum = sum + value;
		}
	}
	for(int i=14;i>=5;i--)
	{
		if(temp[i]==1)
		{
			value = power(2,(i-5));
			sum = sum + value;
		}
	}
	if(temp[31])
		return -1*sum;
	else
		return sum;
}
void normalization(int row, int col, double array[row][col])
{
	double max = 0, min = 255, temp = 0;
	for(int i=0;i<row;i++)
	{
		for(int j=0;j<col;j++)
		{
			temp = array[i][j];
			if(temp>max)
				max = temp;
			if(temp<min)
				min = temp;
		}

		for(int j=0; j<col;j++)
		{
			array[i][j] = (array[i][j] - min)/(max - min);
		}
	}
}

void print_float(float Input)
{

    long int fix_part = (long int) Input;

    long int frac_part = (long int) (Input*1000.0 - fix_part*1000);

    xil_printf(" %d", fix_part);

    if(frac_part>100)
    	xil_printf(".%d ", frac_part);
    else if((frac_part <100)&&(frac_part >10))
        xil_printf(".0%d ", frac_part);
    else if(frac_part <10)
        xil_printf(".00%d ", frac_part);
    else
    	xil_printf("0");
}

int power(int base, int exp)
{
	int result = 1;
	while(exp!=0)
	{
		result = result * base;
		exp--;
	}
	return result;
}
double sigmoid(double x){
	return(1.0 / (1.0 + exp(-x)));
}
